# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dica_pb2 as dica__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DicaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CriarJogador = channel.unary_unary(
                '/configuration.DicaService/CriarJogador',
                request_serializer=dica__pb2.NomeJogador.SerializeToString,
                response_deserializer=dica__pb2.NomeJogadorResp.FromString,
                )
        self.EscolherPalavra = channel.unary_unary(
                '/configuration.DicaService/EscolherPalavra',
                request_serializer=dica__pb2.Palavra.SerializeToString,
                response_deserializer=dica__pb2.PalavraResp.FromString,
                )
        self.VerPalavra = channel.unary_unary(
                '/configuration.DicaService/VerPalavra',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dica__pb2.PalavraResp.FromString,
                )
        self.VerDica = channel.unary_unary(
                '/configuration.DicaService/VerDica',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dica__pb2.Dica.FromString,
                )
        self.DarDica = channel.unary_unary(
                '/configuration.DicaService/DarDica',
                request_serializer=dica__pb2.Dica.SerializeToString,
                response_deserializer=dica__pb2.NomeJogadorResp.FromString,
                )
        self.DarPalpite = channel.unary_unary(
                '/configuration.DicaService/DarPalpite',
                request_serializer=dica__pb2.Palpite.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.VerPalpite = channel.unary_unary(
                '/configuration.DicaService/VerPalpite',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dica__pb2.PalpiteResposta.FromString,
                )
        self.PartidaStream = channel.unary_unary(
                '/configuration.DicaService/PartidaStream',
                request_serializer=dica__pb2.Palpite.SerializeToString,
                response_deserializer=dica__pb2.NomeJogadorResp.FromString,
                )
        self.RodadaStream = channel.unary_unary(
                '/configuration.DicaService/RodadaStream',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dica__pb2.NomeJogadorResp.FromString,
                )


class DicaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CriarJogador(self, request, context):
        """Recebe o nome dos jogadores
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EscolherPalavra(self, request, context):
        """Define a palavra que será adivinhada na partida
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerPalavra(self, request, context):
        """O jogador que fornece a dica deve receber a palavra
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerDica(self, request, context):
        """envia a dica do jogador 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DarDica(self, request, context):
        """o jogador define a dica e retorna o nome do jogador que realizará o palpite
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DarPalpite(self, request, context):
        """recebe o palpite do jogador
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerPalpite(self, request, context):
        """mostra o palpite do jogador
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartidaStream(self, request, context):
        """loop da partida
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RodadaStream(self, request, context):
        """loop da rodada
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DicaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CriarJogador': grpc.unary_unary_rpc_method_handler(
                    servicer.CriarJogador,
                    request_deserializer=dica__pb2.NomeJogador.FromString,
                    response_serializer=dica__pb2.NomeJogadorResp.SerializeToString,
            ),
            'EscolherPalavra': grpc.unary_unary_rpc_method_handler(
                    servicer.EscolherPalavra,
                    request_deserializer=dica__pb2.Palavra.FromString,
                    response_serializer=dica__pb2.PalavraResp.SerializeToString,
            ),
            'VerPalavra': grpc.unary_unary_rpc_method_handler(
                    servicer.VerPalavra,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dica__pb2.PalavraResp.SerializeToString,
            ),
            'VerDica': grpc.unary_unary_rpc_method_handler(
                    servicer.VerDica,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dica__pb2.Dica.SerializeToString,
            ),
            'DarDica': grpc.unary_unary_rpc_method_handler(
                    servicer.DarDica,
                    request_deserializer=dica__pb2.Dica.FromString,
                    response_serializer=dica__pb2.NomeJogadorResp.SerializeToString,
            ),
            'DarPalpite': grpc.unary_unary_rpc_method_handler(
                    servicer.DarPalpite,
                    request_deserializer=dica__pb2.Palpite.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'VerPalpite': grpc.unary_unary_rpc_method_handler(
                    servicer.VerPalpite,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dica__pb2.PalpiteResposta.SerializeToString,
            ),
            'PartidaStream': grpc.unary_unary_rpc_method_handler(
                    servicer.PartidaStream,
                    request_deserializer=dica__pb2.Palpite.FromString,
                    response_serializer=dica__pb2.NomeJogadorResp.SerializeToString,
            ),
            'RodadaStream': grpc.unary_unary_rpc_method_handler(
                    servicer.RodadaStream,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dica__pb2.NomeJogadorResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'configuration.DicaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DicaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CriarJogador(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/CriarJogador',
            dica__pb2.NomeJogador.SerializeToString,
            dica__pb2.NomeJogadorResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EscolherPalavra(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/EscolherPalavra',
            dica__pb2.Palavra.SerializeToString,
            dica__pb2.PalavraResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerPalavra(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/VerPalavra',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dica__pb2.PalavraResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerDica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/VerDica',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dica__pb2.Dica.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DarDica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/DarDica',
            dica__pb2.Dica.SerializeToString,
            dica__pb2.NomeJogadorResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DarPalpite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/DarPalpite',
            dica__pb2.Palpite.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerPalpite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/VerPalpite',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dica__pb2.PalpiteResposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PartidaStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/PartidaStream',
            dica__pb2.Palpite.SerializeToString,
            dica__pb2.NomeJogadorResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RodadaStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/configuration.DicaService/RodadaStream',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dica__pb2.NomeJogadorResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
